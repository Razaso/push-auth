// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  githubId  String   @unique
  username  String
  email     String?  @unique
  avatarUrl String?  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  mnemonicShare MnemonicShare?
  mnemonicShareTransaction MnemonicShareTransaction?  // Share3's transaction hash stored on server
  challenge     Challenge[]
}

model Challenge {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  challenge String
  createdAt DateTime @default(now())
  expiresAt DateTime // Challenges should expire

  @@index([userId])
}

model MnemonicShare {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])
  share           String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
}

// Share3's transaction hash stored on server (actual share on blockchain)
model MnemonicShareTransaction {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])
  publicKey       String
  counter         Int      @default(0)
  credentialId    String   // WebAuthn credential ID
  transactionHash String   // Hash of blockchain transaction containing Share3
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
}
